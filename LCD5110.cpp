#include "WProgram.h"
#include "LCD5110.h"

const byte LCD5110::ASCII[][5] = {
  {0x00, 0x00, 0x00, 0x00, 0x00}, // 20
  {0x00, 0x00, 0x5f, 0x00, 0x00}, // 21 !
  {0x00, 0x07, 0x00, 0x07, 0x00}, // 22 "
  {0x14, 0x7f, 0x14, 0x7f, 0x14}, // 23 #
  {0x24, 0x2a, 0x7f, 0x2a, 0x12}, // 24 $
  {0x23, 0x13, 0x08, 0x64, 0x62}, // 25 %
  {0x36, 0x49, 0x55, 0x22, 0x50}, // 26 &
  {0x00, 0x05, 0x03, 0x00, 0x00}, // 27 '
  {0x00, 0x1c, 0x22, 0x41, 0x00}, // 28 (
  {0x00, 0x41, 0x22, 0x1c, 0x00}, // 29 )
  {0x14, 0x08, 0x3e, 0x08, 0x14}, // 2a *
  {0x08, 0x08, 0x3e, 0x08, 0x08}, // 2b +
  {0x00, 0x50, 0x30, 0x00, 0x00}, // 2c ,
  {0x08, 0x08, 0x08, 0x08, 0x08}, // 2d -
  {0x00, 0x60, 0x60, 0x00, 0x00}, // 2e .
  {0x20, 0x10, 0x08, 0x04, 0x02}, // 2f /
  {0x3e, 0x51, 0x49, 0x45, 0x3e}, // 30 0
  {0x00, 0x42, 0x7f, 0x40, 0x00}, // 31 1
  {0x42, 0x61, 0x51, 0x49, 0x46}, // 32 2
  {0x21, 0x41, 0x45, 0x4b, 0x31}, // 33 3
  {0x18, 0x14, 0x12, 0x7f, 0x10}, // 34 4
  {0x27, 0x45, 0x45, 0x45, 0x39}, // 35 5
  {0x3c, 0x4a, 0x49, 0x49, 0x30}, // 36 6
  {0x01, 0x71, 0x09, 0x05, 0x03}, // 37 7
  {0x36, 0x49, 0x49, 0x49, 0x36}, // 38 8
  {0x06, 0x49, 0x49, 0x29, 0x1e}, // 39 9
  {0x00, 0x36, 0x36, 0x00, 0x00}, // 3a :
  {0x00, 0x56, 0x36, 0x00, 0x00}, // 3b ;
  {0x08, 0x14, 0x22, 0x41, 0x00}, // 3c <
  {0x14, 0x14, 0x14, 0x14, 0x14}, // 3d =
  {0x00, 0x41, 0x22, 0x14, 0x08}, // 3e >
  {0x02, 0x01, 0x51, 0x09, 0x06}, // 3f ?
  {0x32, 0x49, 0x79, 0x41, 0x3e}, // 40 @
  {0x7e, 0x11, 0x11, 0x11, 0x7e}, // 41 A
  {0x7f, 0x49, 0x49, 0x49, 0x36}, // 42 B
  {0x3e, 0x41, 0x41, 0x41, 0x22}, // 43 C
  {0x7f, 0x41, 0x41, 0x22, 0x1c}, // 44 D
  {0x7f, 0x49, 0x49, 0x49, 0x41}, // 45 E
  {0x7f, 0x09, 0x09, 0x09, 0x01}, // 46 F
  {0x3e, 0x41, 0x49, 0x49, 0x7a}, // 47 G
  {0x7f, 0x08, 0x08, 0x08, 0x7f}, // 48 H
  {0x00, 0x41, 0x7f, 0x41, 0x00}, // 49 I
  {0x20, 0x40, 0x41, 0x3f, 0x01}, // 4a J
  {0x7f, 0x08, 0x14, 0x22, 0x41}, // 4b K
  {0x7f, 0x40, 0x40, 0x40, 0x40}, // 4c L
  {0x7f, 0x02, 0x0c, 0x02, 0x7f}, // 4d M
  {0x7f, 0x04, 0x08, 0x10, 0x7f}, // 4e N
  {0x3e, 0x41, 0x41, 0x41, 0x3e}, // 4f O
  {0x7f, 0x09, 0x09, 0x09, 0x06}, // 50 P
  {0x3e, 0x41, 0x51, 0x21, 0x5e}, // 51 Q
  {0x7f, 0x09, 0x19, 0x29, 0x46}, // 52 R
  {0x46, 0x49, 0x49, 0x49, 0x31}, // 53 S
  {0x01, 0x01, 0x7f, 0x01, 0x01}, // 54 T
  {0x3f, 0x40, 0x40, 0x40, 0x3f}, // 55 U
  {0x1f, 0x20, 0x40, 0x20, 0x1f}, // 56 V
  {0x3f, 0x40, 0x38, 0x40, 0x3f}, // 57 W
  {0x63, 0x14, 0x08, 0x14, 0x63}, // 58 X
  {0x07, 0x08, 0x70, 0x08, 0x07}, // 59 Y
  {0x61, 0x51, 0x49, 0x45, 0x43}, // 5a Z
  {0x00, 0x7f, 0x41, 0x41, 0x00}, // 5b [
  {0x02, 0x04, 0x08, 0x10, 0x20}, // 5c ¥
  {0x00, 0x41, 0x41, 0x7f, 0x00}, // 5d ]
  {0x04, 0x02, 0x01, 0x02, 0x04}, // 5e ^
  {0x40, 0x40, 0x40, 0x40, 0x40}, // 5f _
  {0x00, 0x01, 0x02, 0x04, 0x00}, // 60 `
  {0x20, 0x54, 0x54, 0x54, 0x78}, // 61 a
  {0x7f, 0x48, 0x44, 0x44, 0x38}, // 62 b
  {0x38, 0x44, 0x44, 0x44, 0x20}, // 63 c
  {0x38, 0x44, 0x44, 0x48, 0x7f}, // 64 d
  {0x38, 0x54, 0x54, 0x54, 0x18}, // 65 e
  {0x08, 0x7e, 0x09, 0x01, 0x02}, // 66 f
  {0x0c, 0x52, 0x52, 0x52, 0x3e}, // 67 g
  {0x7f, 0x08, 0x04, 0x04, 0x78}, // 68 h
  {0x00, 0x44, 0x7d, 0x40, 0x00}, // 69 i
  {0x20, 0x40, 0x44, 0x3d, 0x00}, // 6a j
  {0x7f, 0x10, 0x28, 0x44, 0x00}, // 6b k
  {0x00, 0x41, 0x7f, 0x40, 0x00}, // 6c l
  {0x7c, 0x04, 0x18, 0x04, 0x78}, // 6d m
  {0x7c, 0x08, 0x04, 0x04, 0x78}, // 6e n
  {0x38, 0x44, 0x44, 0x44, 0x38}, // 6f o
  {0x7c, 0x14, 0x14, 0x14, 0x08}, // 70 p
  {0x08, 0x14, 0x14, 0x18, 0x7c}, // 71 q
  {0x7c, 0x08, 0x04, 0x04, 0x08}, // 72 r
  {0x48, 0x54, 0x54, 0x54, 0x20}, // 73 s
  {0x04, 0x3f, 0x44, 0x40, 0x20}, // 74 t
  {0x3c, 0x40, 0x40, 0x20, 0x7c}, // 75 u
  {0x1c, 0x20, 0x40, 0x20, 0x1c}, // 76 v
  {0x3c, 0x40, 0x30, 0x40, 0x3c}, // 77 w
  {0x44, 0x28, 0x10, 0x28, 0x44}, // 78 x
  {0x0c, 0x50, 0x50, 0x50, 0x3c}, // 79 y
  {0x44, 0x64, 0x54, 0x4c, 0x44}, // 7a z
  {0x00, 0x08, 0x36, 0x41, 0x00}, // 7b {
  {0x00, 0x00, 0x7f, 0x00, 0x00}, // 7c |
  {0x00, 0x41, 0x36, 0x08, 0x00}, // 7d }
  {0x10, 0x08, 0x08, 0x10, 0x08}, // 7e ?
  {0x78, 0x46, 0x41, 0x46, 0x78}, // 7f ?
};

LCD5110::LCD5110(byte sclk_pin, byte sdin_pin, byte dc_pin, byte reset_pin, byte sce_pin, byte led_pin) : sclk_pin(sclk_pin), sdin_pin(sdin_pin), dc_pin(dc_pin), reset_pin(reset_pin), sce_pin(sce_pin), led_pin(led_pin) {

}

/*
 * Dtor
 */
LCD5110::~LCD5110(){
}

/**
 * Clear the dispplay
 */
void LCD5110::clearScreen(void){

  for (int i = 0; i < LCD5110::WIDTH * LCD5110::HEIGHT / 8; i++)
    sendValue(LCD5110::DATA, 0x00);

}

/**
 * Clear the display and reset the cursor to (0,0)
 */
void LCD5110::clearScreenOrigin(void){

  clearScreen();
  setOrigin();

}

 /**
 * Set the pins mode, reset the display and put it in non-inverted video mode
 */
void LCD5110::init(void){

  /* Set pins mode */
  pinMode(sclk_pin, OUTPUT);
  pinMode(sdin_pin, OUTPUT);
  pinMode(dc_pin, OUTPUT);
  pinMode(reset_pin, OUTPUT);
  pinMode(sce_pin, OUTPUT);
  pinMode(led_pin, OUTPUT);

  reset(); /* Reset the display */
  sendValue(LCD5110::COMMAND, 0x20); /* Set PD (power down) off */
  setInverseVideo(false);
  clearScreen();

}

/**
 * Clear the display and print the character c at (0,0)
 * @param c Character to be printed
 */
void LCD5110::printChar(byte c){

  clearScreen();
  setOrigin();
  sendChar(c);

}

/**
 * Clear the display and print the inverted character c at (0,0)
 * @param c Character to be printed
 */
void LCD5110::printInvertedChar(byte c){

  clearScreen();
  setOrigin();
  sendInvertedChar(c);

}

/**
 * Clear the display and print the inverted string s starting from (0,0)
 * @param s The string to be printed
 */
void LCD5110::printInvertedStr(String s){

  clearScreen();
  setOrigin();
  sendInvertedStr(s);

}

/**
 * Clear the display and print the string s starting from (0,0)
 * @param s The string to be printed
 */
void LCD5110::printStr(String s){

  clearScreen();
  setOrigin();
  sendStr(s);

}

/**
 * Send out a caracter at the current cursor position
 * @param c The character to be printed
 */
void LCD5110::sendChar(byte c){

  sendValue(LCD5110::DATA, 0x00);
  for(int i = 0; i < 5; i++)
    sendValue(LCD5110::DATA, LCD5110::ASCII[c - 0x20][i]);
  sendValue(LCD5110::DATA, 0x00);

}

/**
 * Send out an inverted caracter at the current cursor position
 * @param c The character to be printed
 */
void LCD5110::sendInvertedChar(byte c){

  sendValue(LCD5110::DATA, 0xFF);
  for(int i = 0; i < 5; i++)
    sendValue(LCD5110::DATA, 0xFF - LCD5110::ASCII[c - 0x20][i]);
  sendValue(LCD5110::DATA, 0xFF);

}

/**
 * Send out an inverted string starting from the current cursor position
 * @param s The string to be printed
 */
void LCD5110::sendInvertedStr(String s){

  int i = 0;

  while (i < s.length())
    sendInvertedChar(s[i++]);

}

/**
 * Send out a string starting from the current cursor position
 * @param s The string to be printed
 */
void LCD5110::sendStr(String s){

  int i = 0;

  while (i < s.length())
    sendChar(s[i++]);

}

/**
 * Turn the backlight on or off
 * @param b Backlight setting
 */
void LCD5110::setBacklight(boolean b){

  if (b)
    analogWrite(led_pin, 10);
  else
    analogWrite(led_pin, 0);

}

/**
 * Activate or deactivate inverse video mode
 * @param b Inverse video setting
 */
void LCD5110::setInverseVideo(boolean b){

  if (b)
    sendValue(LCD5110::COMMAND, 0x0D);
  else
    sendValue(LCD5110::COMMAND, 0x0C);

}

/**
 * Set the cursor to coordinates (0,0)
 */
void LCD5110::setOrigin(void){

  setXYChar(0,0);

}

/**
 * Set the cursor to the character at coordinates (X,Y)
 * @param x The x coordinate [0:X_CHARS-1]
 * @param y Tee y coordinate [0:Y_CHARS-1]
 */
void LCD5110::setXYChar(byte x, byte y){

  /* Check for onscreen values */
  if (x >= LCD5110::X_CHARS || y >= LCD5110::Y_CHARS)
    return;

  sendValue(LCD5110::COMMAND, 0x80|(x*LCD5110::CHAR_WIDTH));
  sendValue(LCD5110::COMMAND, 0x40|y);

}

/* Private methods */

/**
 * Reset the display
 */
void LCD5110::reset(void){

  /* Pulse the reset line */
  digitalWrite(reset_pin, LOW);
  digitalWrite(reset_pin, HIGH);

}

/**
 * Send command or data to the display
 * @param dc Data/Command flag
 * @param data Data content
 */
void LCD5110::sendValue(byte dc, byte data){

  digitalWrite(dc_pin, dc);
  digitalWrite(sce_pin, LOW);
  shiftOut(sdin_pin, sclk_pin, MSBFIRST, data);
  digitalWrite(sce_pin, HIGH);

}
